#MAIN ALGORITHM CONSISTING OF 5 SUB-ALGORITHMS
#Each Sub-Algorithm Was Assigned a Weight Determined by 
#Its Amount of Convinced Images from the Test Set

library(tidyverse)
library(keras)
library(tensorflow)
library(reticulate)
library(png)

setwd("~/Desktop/Project")
model_list <- load_model_tf("./dandelion_model/")
model <- model_list

#Functions Created for Sub-Algorithms
change_brightness <- function(img, alpha, beta) {
  new_image <- img
  for (k in pixel_indices_6) {
    row_index <- ceiling(k / 224)
    col_index <- k %% 224
    if (col_index == 0){ col_index <- 224}
    new_image[, row_index, col_index ,] <- pmax(pmin(alpha*new_image[, row_index, col_index ,] + beta, 255), 0)
  } 
  return(new_image)
}


ccp_attack <- function(x, trans) {
  img <- x
  for (channel in seq_len(dim(x)[3])) {
    for (j in pixel_indices_6) {
      row_index <- ceiling(j / 224)
      col_index <- j %% 224
      if (col_index == 0){ col_index <- 224}
      r <- img[,row_index,col_index,1]
      g <- img[,row_index,col_index,2]
      b <- img[,row_index,col_index,3]
      temp <- r * trans[1, channel] + g * trans[2, channel] + b * trans[3, channel]
      img[, row_index, col_index , channel] <- temp/3
      img1 = change_brightness(img, 1, 30)
    }
    
    return(img1)
  }
}


#Set target image size
target_size <- c(224, 224)

#Create Data Frame
res <- data.frame(file = character(), class = character(), percent_dandelion = numeric(), percent_dandelions = numeric(), stringsAsFactors = FALSE)

#Begin Grass Files##############################################################

f <- list.files("./grass")
for (i in f) {
  
  #Load image as Keras tensor object
  test_image <- image_load(paste("./grass/", i, sep = ""), target_size = target_size)
  
  #Convert Keras tensor object to  array
  test_array <- image_to_array(test_image)
  
  #Assign Budgets
  test_array <- array_reshape(test_array, c(1, dim(test_array)))
  test_array <- test_array / 255
  pixel_num <- 224 * 224
  budget <- round(pixel_num * 0.01)
  
  budget_alg1<- budget*(0.16717) #Weight Decided for Algorithm 1
  budget_alg2<- budget*(0.2) #Weight Decided for Algorithm 2
  budget_alg3<- budget*(0.2)  #Weight Decided for Algorithm 3
  budget_alg4<- budget*(0.14752) #Weight Decided for Algorithm 4
  budget_alg6<- budget*(0.6853)*(0.009) #Weight Decided for Algorithm 6
  
  ##Algorithm 2 Nicholas and Andrew_____________________________________________
  #Generate random pixel indices
  pixel_indices_2 <- sample(pixel_num, budget_alg2, replace = FALSE)
  
  #Swap Random Pixels
  test_array[pixel_indices_2] <- sample(test_array[setdiff(seq_along(test_array), pixel_indices_2)], budget_alg2)
  
  
  ##Algorithm 4 Andrew__________________________________________________________
  #Generate random pixel indices
  pixel_indices_4 <- sample(pixel_num, budget_alg4, replace = FALSE)
  
  #Add random noise to the pixel values and their RGB channels
  for (j in pixel_indices_4) {
    row_index <- ceiling(j / 224)
    col_index <- j %% 224
    if (col_index == 0){ col_index <- 224}
    
    #Alter red channel the least, these images do not have many values in the red channel
    r_chan <- runif(1, -0.01, 0.01) 
    test_array[1, row_index, col_index, 1] <- test_array[1, row_index, col_index, 1] + r_chan
    
    #Alter green channel is a heavier component of these images
    g_chan <- runif(1, -0.8, 0.8) 
    test_array[1, row_index, col_index, 2] <- test_array[1, row_index, col_index, 2] + g_chan
    
    #Alter blue channel as it is a heavier component of these images
    b_chan <- runif(1, -0.8, 0.8) 
    test_array[1, row_index, col_index, 3] <- test_array[1, row_index, col_index, 3] + b_chan
  }
  
  ##ALGORITHM 1 Talya___________________________________________________________
  # Generate random pixel indices
  pixel_indices_1 <- sample(pixel_num, budget_alg1, replace = FALSE)
  
  # Change the color of random pixels
  for (j in pixel_indices_1) {
    row_index <- ceiling(j / 224)
    col_index <- j %% 224
    if (col_index == 0){ col_index <- 224}
    
    # Generate new color values
    r <- runif(1, 0, 1)
    g <- runif(1, 0, 1)
    b <- runif(1, 0, 1)
    
    # Change the color of the pixel
    test_array[1, row_index, col_index, ] <- c(r, g, b)
  }
  ##ALGORITHM 6 CCP Attack Hershi_______________________________________________
  #CCP attack
  pixel_indices_6 <-sample(pixel_num, budget_alg6, replace = FALSE)
  a <- runif(3, 0, 1)
  b <- runif(3, 0, 1)
  c <- runif(3, 0, 1)
  trans <- array(c(a, b, c), dim = c(3, 3))
  
  
  test_array <- ccp_attack(test_array, trans)
  
  pred <- model %>% predict(test_array)
  
  # Record results in Res
  if (pred[1,2] < 0.50){
    res <- rbind(res, data.frame(file = i, class = "not_grass", percent_dandelion = pred[1,1], percent_grass = 1- pred[1,1]))
  } else {
    res <- rbind(res, data.frame(file = i, class = "grass", percent_dandelion = pred[1,1], percent_grass = 1 - pred[1,1]))
  }
}


#Begin Dandelion Files##########################################################

f <- list.files("./dandelions")
for (i in f) {
  
  #Load image as Keras tensor object
  test_image <- image_load(paste("./dandelions/", i, sep = ""), target_size = target_size)
  
  #Convert Keras tensor object to  array
  test_array <- image_to_array(test_image)
  
  #Assign Budgets
  test_array <- array_reshape(test_array, c(1, dim(test_array)))
  test_array <- test_array / 255
  pixel_num <- 224 * 224
  budget <- round(pixel_num * 0.01)
  
  budget_alg1<- budget*(0.16717) #Weight Decided for Algorithm 1
  budget_alg2<- budget*(0.2) #Weight Decided for Algorithm 2
  budget_alg3<- budget*(0.2) #Weight Decided for Algorithm 3
  budget_alg4<- budget*(0.14752) #Weight Decided for Algorithm 4
  budget_alg6<- budget*(0.6853)*(0.009) #Weight Decided for Algorithm 6
  
  ##Algorithm 2 Nicholas and Andrew_____________________________________________
  #Generate random pixel indices
  pixel_indices_2 <- sample(pixel_num, budget_alg2, replace = FALSE)
  
  #Swap Random Pixels
  test_array[pixel_indices_2] <- sample(test_array[setdiff(seq_along(test_array), pixel_indices_2)], budget_alg2)
  
  ##Algorithm 4 Andrew___________________________________________________________
  #Generate random pixel indices
  pixel_indices_4 <- sample(pixel_num, budget_alg4, replace = FALSE)
  
  #Add random noise to the pixel values and their RGB channels
  for (j in pixel_indices_4) {
    row_index <- ceiling(j / 224)
    col_index <- j %% 224
    if (col_index == 0){ col_index <- 224}
    
    #Alter red channel the least, these images do not have many values in the red channel
    r_chan <- runif(1, -0.01, 0.01) 
    test_array[1, row_index, col_index, 1] <- test_array[1, row_index, col_index, 1] + r_chan
    
    #Alter green channel is a heavier component of these images
    g_chan <- runif(1, -0.8, 0.8) 
    test_array[1, row_index, col_index, 2] <- test_array[1, row_index, col_index, 2] + g_chan
    
    #Alter blue channel as it is a heavier component of these images
    b_chan <- runif(1, -0.8, 0.8) 
    test_array[1, row_index, col_index, 3] <- test_array[1, row_index, col_index, 3] + b_chan
  }
  ##ALGORITHM 1 Talya___________________________________________________________
  # Generate random pixel indices
  pixel_indices_1 <- sample(pixel_num, budget_alg1, replace = FALSE)
  
  # Change the color of random pixels
  for (j in pixel_indices_1) {
    row_index <- ceiling(j / 224)
    col_index <- j %% 224
    if (col_index == 0){ col_index <- 224}
    
    # Generate new color values
    r <- runif(1, 0, 1)
    g <- runif(1, 0, 1)
    b <- runif(1, 0, 1)
    
    # Change the color of the pixel
    test_array[1, row_index, col_index, ] <- c(r, g, b)
  }
  ##ALGORITHM 6 CCP Attack Hershi_______________________________________________
  #CCP attack
  pixel_indices_6 <- sample(pixel_num,budget_alg6 , replace = FALSE)
  a <- runif(3, 0, 1)
  b <- runif(3, 0, 1)
  c <- runif(3, 0, 1)
  trans <- array(c(a, b, c), dim = c(3, 3))
  
  
  test_array <- ccp_attack(test_array, trans)
  
  pred <- model %>% predict(test_array)
  
  # Record results in Res
  if (pred[1,1] < 0.50){
    res <- rbind(res, data.frame(file = i, class = "not_dandelion", percent_dandelion = pred[1,1], percent_grass = 1- pred[1,1]))
  } else {
    res <- rbind(res, data.frame(file = i, class = "dandelion", percent_dandelion = pred[1,1], percent_grass = 1 - pred[1,1]))
  }
}

print(res)
View(res)
